{
  "version": "2.0.0",
  "last_updated": "2025-10-22",
  "description": "Auto-fix patterns for common issues in full-stack projects. Used by specialized agents to automatically fix detected problems.",

  "typescript": {
    "unused_imports": {
      "priority": "auto",
      "detection": {
        "tool": "eslint",
        "command": "npx eslint --rule '@typescript-eslint/no-unused-vars: error'",
        "pattern": "is defined but never used"
      },
      "fix": {
        "method": "eslint-fix",
        "command": "npx eslint --fix \"${file}\"",
        "success_rate": 1.0
      },
      "applies_to": ["*.ts", "*.tsx"]
    },

    "missing_vite_env": {
      "priority": "auto",
      "detection": {
        "condition": "builder === 'vite' && !exists('src/vite-env.d.ts')",
        "pattern": "import.meta.env usage without vite-env.d.ts"
      },
      "fix": {
        "method": "generate-file",
        "template": "/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_API_URL: string\n  readonly VITE_API_KEY?: string\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}",
        "path": "src/vite-env.d.ts",
        "success_rate": 1.0
      },
      "applies_to": ["vite projects"]
    },

    "react_query_v4_syntax": {
      "priority": "suggest",
      "detection": {
        "pattern": "useQuery\\(\\s*\\[([^\\]]+)\\]\\s*,\\s*([^,]+)\\s*,?\\s*(\\{[^}]*\\})?\\s*\\)",
        "tool": "grep"
      },
      "fix": {
        "method": "regex-replace",
        "find": "useQuery\\(\\s*\\[([^\\]]+)\\]\\s*,\\s*([^,]+)\\s*,?\\s*(\\{[^}]*\\})?\\s*\\)",
        "replace": "useQuery({ queryKey: [$1], queryFn: $2$3 })",
        "success_rate": 0.92
      },
      "applies_to": ["*.ts", "*.tsx"],
      "requires_package": "@tanstack/react-query@^5.0.0"
    },

    "missing_type_assertions": {
      "priority": "suggest",
      "detection": {
        "pattern": "Property .* does not exist on type 'unknown'",
        "tool": "tsc"
      },
      "fix": {
        "method": "add-type-assertion",
        "strategy": "Analyze context and add appropriate 'as Type' assertion",
        "success_rate": 0.75
      },
      "applies_to": ["*.ts", "*.tsx"]
    },

    "old_class_components": {
      "priority": "suggest",
      "detection": {
        "pattern": "extends React\\.Component",
        "tool": "grep"
      },
      "fix": {
        "method": "migrate-to-hooks",
        "strategy": "Convert class component to functional component with hooks",
        "success_rate": 0.65,
        "manual_review": true
      },
      "applies_to": ["*.tsx", "*.jsx"]
    }
  },

  "python": {
    "sqlalchemy_raw_sql": {
      "priority": "auto",
      "detection": {
        "pattern": "\\.execute\\([\"']([^\"']+)[\"']\\)",
        "tool": "grep",
        "description": "Raw SQL strings deprecated in SQLAlchemy 2.0"
      },
      "fix": {
        "method": "wrap-with-text",
        "find": "\\.execute\\(([\"'])([^\"']+)\\1\\)",
        "replace": ".execute(text(\\1\\2\\1))",
        "add_import": "from sqlalchemy import text",
        "success_rate": 1.0
      },
      "applies_to": ["*.py"]
    },

    "missing_type_hints": {
      "priority": "suggest",
      "detection": {
        "tool": "mypy",
        "pattern": "Function is missing a type annotation"
      },
      "fix": {
        "method": "add-type-hints",
        "strategy": "Infer types from usage and add annotations",
        "success_rate": 0.70
      },
      "applies_to": ["*.py"]
    },

    "unused_variables": {
      "priority": "auto",
      "detection": {
        "tool": "pylint",
        "pattern": "Unused variable"
      },
      "fix": {
        "method": "prefix-underscore",
        "find": "([a-zA-Z_][a-zA-Z0-9_]*) = ",
        "replace": "_\\1 = ",
        "success_rate": 0.95
      },
      "applies_to": ["*.py"]
    },

    "database_cascade": {
      "priority": "auto",
      "detection": {
        "error_message": "cannot drop table .* because other objects depend on it",
        "context": "pytest teardown"
      },
      "fix": {
        "method": "add-cascade",
        "find": "(DROP TABLE[^;]+);",
        "replace": "\\1 CASCADE;",
        "also_fix": "(TRUNCATE[^;]+);",
        "also_replace": "\\1 CASCADE;",
        "success_rate": 1.0
      },
      "applies_to": ["test fixtures", "*.py"]
    },

    "missing_pytest_fixtures": {
      "priority": "auto",
      "detection": {
        "error_message": "fixture '.*' not found",
        "tool": "pytest"
      },
      "fix": {
        "method": "generate-fixture",
        "template": "@pytest.fixture(scope=\"function\")\ndef ${fixture_name}():\n    \"\"\"Auto-generated fixture\"\"\"\n    yield None",
        "success_rate": 0.85
      },
      "applies_to": ["tests/conftest.py"]
    }
  },

  "javascript": {
    "esm_in_commonjs": {
      "priority": "auto",
      "detection": {
        "condition": "file.endsWith('.js') && !packageJson.type === 'module' && (content.includes('export default') || content.includes('import '))",
        "description": "ESM syntax in .js file without type: module"
      },
      "fix": {
        "method": "rename-to-mjs",
        "action": "mv ${file} ${file.replace('.js', '.mjs')}",
        "update_references": true,
        "success_rate": 0.95
      },
      "applies_to": ["*.config.js", "*.js"]
    },

    "commonjs_in_mjs": {
      "priority": "auto",
      "detection": {
        "condition": "file.endsWith('.mjs') && (content.includes('module.exports') || content.includes('require('))"
      },
      "fix": {
        "method": "convert-to-esm",
        "replacements": [
          {
            "find": "module\\.exports\\s*=",
            "replace": "export default"
          },
          {
            "find": "const (\\w+) = require\\(['\"]([^'\"]+)['\"]\\)",
            "replace": "import $1 from '$2'"
          }
        ],
        "success_rate": 0.85
      },
      "applies_to": ["*.mjs"]
    },

    "missing_error_handling": {
      "priority": "suggest",
      "detection": {
        "pattern": "(axios\\.|fetch\\().*(?!catch)(?!try)",
        "description": "API call without error handling"
      },
      "fix": {
        "method": "add-catch-block",
        "strategy": "Add .catch() for promises or wrap in try-catch for await",
        "template_promise": ".catch((error) => { console.error('API call failed:', error); throw error; })",
        "template_async": "try {\n  ${code}\n} catch (error) {\n  console.error('API call failed:', error);\n  throw error;\n}",
        "success_rate": 0.88
      },
      "applies_to": ["*.ts", "*.tsx", "*.js", "*.jsx"]
    }
  },

  "build_config": {
    "missing_vite_config": {
      "priority": "auto",
      "detection": {
        "condition": "hasVite && !exists('vite.config.ts')"
      },
      "fix": {
        "method": "generate-config",
        "template_file": "templates/vite.config.template.ts",
        "adapt_to_framework": true,
        "success_rate": 0.95
      },
      "applies_to": ["vite projects"]
    },

    "missing_path_alias": {
      "priority": "suggest",
      "detection": {
        "pattern": "from '@/",
        "condition": "!config.includes('alias')"
      },
      "fix": {
        "method": "add-alias-config",
        "vite": "resolve: { alias: { '@': path.resolve(__dirname, './src') } }",
        "webpack": "resolve: { alias: { '@': path.resolve(__dirname, 'src') } }",
        "tsconfig": "paths: { '@/*': ['./src/*'] }",
        "success_rate": 0.90
      },
      "applies_to": ["vite.config.ts", "webpack.config.js", "tsconfig.json"]
    },

    "missing_env_example": {
      "priority": "auto",
      "detection": {
        "condition": "envVarsUsed.length > 0 && !exists('.env.example')"
      },
      "fix": {
        "method": "generate-env-example",
        "strategy": "Extract all env var references and create .env.example",
        "success_rate": 1.0
      },
      "applies_to": ["root directory"]
    }
  },

  "api_contract": {
    "missing_error_handling": {
      "priority": "suggest",
      "detection": {
        "pattern": "API call without .catch() or try-catch"
      },
      "fix": {
        "method": "add-error-handling",
        "success_rate": 0.88
      },
      "applies_to": ["*.ts", "*.tsx"]
    },

    "missing_client_method": {
      "priority": "suggest",
      "detection": {
        "condition": "Backend endpoint exists but no frontend client method"
      },
      "fix": {
        "method": "generate-client-method",
        "strategy": "Generate method from OpenAPI schema",
        "success_rate": 0.85
      },
      "applies_to": ["API client files"]
    },

    "type_mismatch": {
      "priority": "suggest",
      "detection": {
        "condition": "Frontend types don't match backend schema"
      },
      "fix": {
        "method": "regenerate-types",
        "tool": "openapi-typescript",
        "command": "npx openapi-typescript ${schemaUrl} -o src/types/api.ts",
        "success_rate": 0.95
      },
      "applies_to": ["*.ts"]
    }
  },

  "statistics": {
    "total_patterns": 24,
    "auto_fixable": 12,
    "suggest_fixable": 12,
    "average_success_rate": 0.89,
    "most_common_issues": [
      "unused_imports",
      "sqlalchemy_raw_sql",
      "esm_in_commonjs",
      "missing_error_handling",
      "database_cascade"
    ]
  },

  "usage_notes": {
    "priority_levels": {
      "auto": "Fix automatically without confirmation",
      "suggest": "Suggest fix and ask for confirmation"
    },
    "success_rate": {
      "1.0": "Always succeeds",
      "0.9-0.99": "Very reliable",
      "0.8-0.89": "Reliable, occasional manual review needed",
      "0.7-0.79": "Often succeeds, manual review recommended",
      "<0.7": "Requires manual review"
    },
    "pattern_learning": {
      "description": "This file is automatically updated by the learning-engine agent",
      "update_frequency": "After every 10 similar issues fixed",
      "metrics_tracked": "success_rate, applies_to, detection accuracy"
    }
  }
}
